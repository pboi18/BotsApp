/**
 * @module QRCode
 * @package @nuintun/qrcode
 * @license MIT
 * @version 3.3.0
 * @author nuintun <nuintun@qq.com>
 * @description A pure JavaScript QRCode encode and decode library.
 * @see https://github.com/nuintun/qrcode#readme
 */

'use strict';

var tslib = require('tslib');
var OutputStream = require('./OutputStream.cjs');

/**
 * @module Base64EncodeOutputStream
 * @author nuintun
 * @author Kazuhiko Arase
 */
function encode(ch) {
  if (ch >= 0) {
    if (ch < 26) {
      // A
      return 0x41 + ch;
    } else if (ch < 52) {
      // a
      return 0x61 + (ch - 26);
    } else if (ch < 62) {
      // 0
      return 0x30 + (ch - 52);
    } else if (ch === 62) {
      // +
      return 0x2b;
    } else if (ch === 63) {
      // /
      return 0x2f;
    }
  }
  throw new Error('illegal char: '.concat(String.fromCharCode(ch)));
}
var Base64EncodeOutputStream = /*#__PURE__*/ (function (_super) {
  tslib.__extends(Base64EncodeOutputStream, _super);
  function Base64EncodeOutputStream(stream) {
    var _this = _super.call(this) || this;
    _this.buffer = 0;
    _this.length = 0;
    _this.bufLength = 0;
    _this.stream = stream;
    return _this;
  }
  Base64EncodeOutputStream.prototype.writeByte = function (byte) {
    this.buffer = (this.buffer << 8) | (byte & 0xff);
    this.bufLength += 8;
    this.length++;
    while (this.bufLength >= 6) {
      this.writeEncoded(this.buffer >>> (this.bufLength - 6));
      this.bufLength -= 6;
    }
  };
  /**
   * @override
   */
  Base64EncodeOutputStream.prototype.flush = function () {
    if (this.bufLength > 0) {
      this.writeEncoded(this.buffer << (6 - this.bufLength));
      this.buffer = 0;
      this.bufLength = 0;
    }
    var stream = this.stream;
    if (this.length % 3 != 0) {
      // Padding
      var pad = 3 - (this.length % 3);
      for (var i = 0; i < pad; i++) {
        // =
        stream.writeByte(0x3d);
      }
    }
  };
  Base64EncodeOutputStream.prototype.writeEncoded = function (byte) {
    this.stream.writeByte(encode(byte & 0x3f));
  };
  return Base64EncodeOutputStream;
})(OutputStream.OutputStream);

exports.Base64EncodeOutputStream = Base64EncodeOutputStream;

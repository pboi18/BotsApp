/**
 * @module QRCode
 * @package @nuintun/qrcode
 * @license MIT
 * @version 3.3.0
 * @author nuintun <nuintun@qq.com>
 * @description A pure JavaScript QRCode encode and decode library.
 * @see https://github.com/nuintun/qrcode#readme
 */

'use strict';

/**
 * @module BitStream
 * @author nuintun
 * @author Cosmo Wolfe
 * @license https://raw.githubusercontent.com/cozmo/jsQR/master/LICENSE
 */
var BitStream = /*#__PURE__*/ (function () {
  function BitStream(bytes) {
    this.byteOffset = 0;
    this.bitOffset = 0;
    this.bytes = bytes;
  }
  BitStream.prototype.readBits = function (numBits) {
    if (numBits < 1 || numBits > 32 || numBits > this.available()) {
      throw new Error("can't read ".concat(numBits, ' bits'));
    }
    var result = 0;
    // First, read remainder from current byte
    if (this.bitOffset > 0) {
      var bitsLeft = 8 - this.bitOffset;
      var toRead = numBits < bitsLeft ? numBits : bitsLeft;
      var bitsToNotRead = bitsLeft - toRead;
      var mask = (0xff >> (8 - toRead)) << bitsToNotRead;
      result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
      numBits -= toRead;
      this.bitOffset += toRead;
      if (this.bitOffset === 8) {
        this.bitOffset = 0;
        this.byteOffset++;
      }
    }
    // Next read whole bytes
    if (numBits > 0) {
      while (numBits >= 8) {
        result = (result << 8) | (this.bytes[this.byteOffset] & 0xff);
        this.byteOffset++;
        numBits -= 8;
      }
      // Finally read a partial byte
      if (numBits > 0) {
        var bitsToNotRead = 8 - numBits;
        var mask = (0xff >> bitsToNotRead) << bitsToNotRead;
        result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);
        this.bitOffset += numBits;
      }
    }
    return result;
  };
  BitStream.prototype.available = function () {
    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
  };
  return BitStream;
})();

exports.BitStream = BitStream;

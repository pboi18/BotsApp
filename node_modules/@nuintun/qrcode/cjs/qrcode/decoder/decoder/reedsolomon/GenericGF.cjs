/**
 * @module QRCode
 * @package @nuintun/qrcode
 * @license MIT
 * @version 3.3.0
 * @author nuintun <nuintun@qq.com>
 * @description A pure JavaScript QRCode encode and decode library.
 * @see https://github.com/nuintun/qrcode#readme
 */

'use strict';

var GenericGFPoly = require('./GenericGFPoly.cjs');

/**
 * @module GenericGF
 * @author nuintun
 * @author Cosmo Wolfe
 * @license https://raw.githubusercontent.com/cozmo/jsQR/master/LICENSE
 */
function addOrSubtractGF(a, b) {
  return a ^ b;
}
var GenericGF = /*#__PURE__*/ (function () {
  function GenericGF(primitive, size, generatorBase) {
    this.primitive = primitive;
    this.size = size;
    this.generatorBase = generatorBase;
    this.expTable = [];
    this.logTable = [];
    var x = 1;
    for (var i = 0; i < this.size; i++) {
      this.logTable[i] = 0;
      this.expTable[i] = x;
      x = x * 2;
      if (x >= this.size) {
        x = (x ^ this.primitive) & (this.size - 1);
      }
    }
    for (var i = 0; i < this.size - 1; i++) {
      this.logTable[this.expTable[i]] = i;
    }
    this.zero = new GenericGFPoly.GenericGFPoly(this, Uint8ClampedArray.from([0]));
    this.one = new GenericGFPoly.GenericGFPoly(this, Uint8ClampedArray.from([1]));
  }
  GenericGF.prototype.multiply = function (a, b) {
    if (a === 0 || b === 0) {
      return 0;
    }
    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
  };
  GenericGF.prototype.inverse = function (a) {
    if (a === 0) {
      throw new Error("can't invert 0");
    }
    return this.expTable[this.size - this.logTable[a] - 1];
  };
  GenericGF.prototype.buildMonomial = function (degree, coefficient) {
    if (degree < 0) {
      throw new Error('invalid monomial degree less than 0');
    }
    if (coefficient === 0) {
      return this.zero;
    }
    var coefficients = new Uint8ClampedArray(degree + 1);
    coefficients[0] = coefficient;
    return new GenericGFPoly.GenericGFPoly(this, coefficients);
  };
  GenericGF.prototype.log = function (a) {
    if (a === 0) {
      throw new Error("can't take log(0)");
    }
    return this.logTable[a];
  };
  GenericGF.prototype.exp = function (a) {
    return this.expTable[a];
  };
  return GenericGF;
})();

exports.GenericGF = GenericGF;
exports.addOrSubtractGF = addOrSubtractGF;

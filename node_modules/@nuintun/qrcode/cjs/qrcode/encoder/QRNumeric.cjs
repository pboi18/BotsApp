/**
 * @module QRCode
 * @package @nuintun/qrcode
 * @license MIT
 * @version 3.3.0
 * @author nuintun <nuintun@qq.com>
 * @description A pure JavaScript QRCode encode and decode library.
 * @see https://github.com/nuintun/qrcode#readme
 */

'use strict';

var tslib = require('tslib');
var QRData = require('./QRData.cjs');
var Mode = require('../common/Mode.cjs');
var UTF16 = require('../../encoding/UTF16.cjs');

/**
 * @module QRNumeric
 * @author nuintun
 * @author Kazuhiko Arase
 */
function getByte(byte) {
  // 0 - 9
  if (0x30 <= byte && byte <= 0x39) {
    return byte - 0x30;
  }
  throw new Error('illegal char: '.concat(String.fromCharCode(byte)));
}
function getBytes(bytes) {
  var num = 0;
  for (var _i = 0, bytes_1 = bytes; _i < bytes_1.length; _i++) {
    var byte = bytes_1[_i];
    num = num * 10 + getByte(byte);
  }
  return num;
}
var QRNumeric = /*#__PURE__*/ (function (_super) {
  tslib.__extends(QRNumeric, _super);
  /**
   * @constructor
   * @param {string} data
   */
  function QRNumeric(data) {
    var _this = _super.call(this, Mode.Mode.Numeric, data) || this;
    _this.bytes = UTF16.encode(data);
    return _this;
  }
  /**
   * @public
   * @method writeTo
   * @param {BitBuffer} buffer
   */
  QRNumeric.prototype.writeTo = function (buffer) {
    var i = 0;
    var bytes = this.bytes;
    var length = bytes.length;
    while (i + 2 < length) {
      buffer.put(getBytes([bytes[i], bytes[i + 1], bytes[i + 2]]), 10);
      i += 3;
    }
    if (i < length) {
      if (length - i === 1) {
        buffer.put(getBytes([bytes[i]]), 4);
      } else if (length - i === 2) {
        buffer.put(getBytes([bytes[i], bytes[i + 1]]), 7);
      }
    }
  };
  return QRNumeric;
})(QRData.QRData);

exports.QRNumeric = QRNumeric;

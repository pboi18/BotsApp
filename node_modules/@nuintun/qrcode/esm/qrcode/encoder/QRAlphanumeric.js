/**
 * @module QRCode
 * @package @nuintun/qrcode
 * @license MIT
 * @version 3.3.0
 * @author nuintun <nuintun@qq.com>
 * @description A pure JavaScript QRCode encode and decode library.
 * @see https://github.com/nuintun/qrcode#readme
 */

import { __extends } from 'tslib';
import { QRData } from './QRData.js';
import { Mode } from '../common/Mode.js';
import { encode } from '../../encoding/UTF16.js';

/**
 * @module QRAlphanumeric
 * @author nuintun
 * @author Kazuhiko Arase
 */
function getByte(byte) {
  if (0x30 <= byte && byte <= 0x39) {
    // 0 - 9
    return byte - 0x30;
  } else if (0x41 <= byte && byte <= 0x5a) {
    // A - Z
    return byte - 0x41 + 10;
  } else {
    switch (byte) {
      // space
      case 0x20:
        return 36;
      // $
      case 0x24:
        return 37;
      // %
      case 0x25:
        return 38;
      // *
      case 0x2a:
        return 39;
      // +
      case 0x2b:
        return 40;
      // -
      case 0x2d:
        return 41;
      // .
      case 0x2e:
        return 42;
      // /
      case 0x2f:
        return 43;
      // :
      case 0x3a:
        return 44;
      default:
        throw new Error('illegal char: '.concat(String.fromCharCode(byte)));
    }
  }
}
var QRAlphanumeric = /*#__PURE__*/ (function (_super) {
  __extends(QRAlphanumeric, _super);
  /**
   * @constructor
   * @param {string} data
   */
  function QRAlphanumeric(data) {
    var _this = _super.call(this, Mode.Alphanumeric, data) || this;
    _this.bytes = encode(data);
    return _this;
  }
  /**
   * @public
   * @method writeTo
   * @param {BitBuffer} buffer
   */
  QRAlphanumeric.prototype.writeTo = function (buffer) {
    var i = 0;
    var bytes = this.bytes;
    var length = bytes.length;
    while (i + 1 < length) {
      buffer.put(getByte(bytes[i]) * 45 + getByte(bytes[i + 1]), 11);
      i += 2;
    }
    if (i < length) {
      buffer.put(getByte(bytes[i]), 6);
    }
  };
  return QRAlphanumeric;
})(QRData);

export { QRAlphanumeric };

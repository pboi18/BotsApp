/**
 * @module QRCode
 * @package @nuintun/qrcode
 * @license MIT
 * @version 3.3.0
 * @author nuintun <nuintun@qq.com>
 * @description A pure JavaScript QRCode encode and decode library.
 * @see https://github.com/nuintun/qrcode#readme
 */

import { __extends } from 'tslib';
import { QRData } from './QRData.js';
import { Mode } from '../common/Mode.js';
import { encode } from '../../encoding/SJIS.js';

/**
 * @module QRKanji
 * @author nuintun
 * @author Kazuhiko Arase
 * @description SJIS only
 */
var QRKanji = /*#__PURE__*/ (function (_super) {
  __extends(QRKanji, _super);
  /**
   * @constructor
   * @param {string} data
   */
  function QRKanji(data) {
    var _this = _super.call(this, Mode.Kanji, data) || this;
    _this.bytes = encode(data);
    return _this;
  }
  /**
   * @public
   * @method writeTo
   * @param {BitBuffer} buffer
   */
  QRKanji.prototype.writeTo = function (buffer) {
    var index = 0;
    var bytes = this.bytes;
    var length = bytes.length;
    while (index + 1 < length) {
      var code = ((0xff & bytes[index]) << 8) | (0xff & bytes[index + 1]);
      if (0x8140 <= code && code <= 0x9ffc) {
        code -= 0x8140;
      } else if (0xe040 <= code && code <= 0xebbf) {
        code -= 0xc140;
      }
      code = ((code >> 8) & 0xff) * 0xc0 + (code & 0xff);
      buffer.put(code, 13);
      index += 2;
    }
  };
  /**
   * @public
   * @method getLength
   * @returns {number}
   */
  QRKanji.prototype.getLength = function () {
    return Math.floor(this.bytes.length / 2);
  };
  return QRKanji;
})(QRData);

export { QRKanji };
